{
  
    
        "post0": {
            "title": "The Evolution of Music Industry Sales",
            "content": "Karinn Murdock . 03/14/2022 . The Evolution of Music Industry Sales . Introduction . For my final project, I am exploring the music industry and how it has changed over the years. More specifically, I want to look at how music industry sales have changed in the past 40 years in terms of types of sales (CDs, streaming, etc). In answering this overarching research question, I also want to explore (1) how the rise of new sale formats has led to the demise of others, and (2) which sales formats will be most popular moving forward. . The music industry has seen drastic change in recent years as a result of the Internet and music streaming platforms such as Spotify and Apple Music. Since the industry is changing so quickly, it is difficult for artists, record labels, and other companies to keep up. The topic I am researching is important to both artists and business executives in the music industry as they must understand the current sales landscape in order to maximize sales and cater to customer&#39;s preferences. By understanding which sale formats are most popular now, which ones are on the decline, and which ones will be popular in the future, artists and companies can know where to focus their marketing and distribution resources going forward. . This topic is of interest to me as I&#39;m very passionate about music. Throughout my life, I have witnessed how drastically the way I consume music has changed. Additionally, I am extremely interested in the music industry and would love to work on the business side of the music industry after graduation. By understanding how music industry sales and consumer preferences have changed, I hope I will be able to have a better understanding of where the industry is going. . Methods . The data source I will use to explore my research question is a dataset I found on data.world. This dataset is on music industry sales over the past 40 years and was created by the Recording Industry Association of America (RIAA). According to RIAA, this is the most comprehensive data on U.S. recorded music revenues. This dataset goes all the way back to 1973 and lists format of sale, metric of sale, year of sale, and value of sale. A link to the dataset can be found here: https://data.world/makeovermonday/2020w21-visualizing-40-years-of-music-industry-sales . This dataset contains data on 23 different sales formats, from cassette sales to album sales to on-demand streaming sales. For each format (except a few), the sales value is listed for each year in three different metrics: units sold, revenue at time of sale, and revenue adjusted to present value. The &quot;Value (Actual)&quot; column is displayed in millions for both unit values and revenue values. . As stated in my introduction, I intend to analyze how music industry sales have changed since 1973 in terms of type of sales, as well as and how new sales formats have affected older sales formats. For my analysis, I decided to only work with the revenue adjusted to present value data, as I found it to be the most insightful. I split my analysis roughly into 5 main steps. First, I am creating bar charts of every sales formats in order to understand how sales of each format have changed since 1973. Second, I am going to create pie charts at different points in time to see how the composition of music sales has changed. Third, I am going to look at the correlation of different sales formats in the 2000&#39;s to understand which formats are correlated and which are anti-correlated. To take this analysis one step further, I am going to conduct linear regression analysis. Lastly, I am going to look at the growth rates of particular sales formats in 2019 to reveal which formats are increasing in popularity. . Results . import pandas as pd import matplotlib.pyplot as plt from matplotlib.pyplot import figure import ipywidgets import numpy as np from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error, r2_score . Data Exploration . df = pd.read_csv(&#39;MusicData2.csv&#39;) . df.shape . (3008, 5) . The dataset has 5 columns and 3008 rows of data. . df.columns . Index([&#39;Format&#39;, &#39;Metric&#39;, &#39;Year&#39;, &#39;Number of Records&#39;, &#39;Value (Actual)&#39;], dtype=&#39;object&#39;) . Finding summary statistics: . df . Format Metric Year Number of Records Value (Actual) . 0 CD | Units | 1973 | 1 | NaN | . 1 CD | Units | 1974 | 1 | NaN | . 2 CD | Units | 1975 | 1 | NaN | . 3 CD | Units | 1976 | 1 | NaN | . 4 CD | Units | 1977 | 1 | NaN | . ... ... | ... | ... | ... | ... | . 3003 Vinyl Single | Value (Adjusted) | 2015 | 1 | 6.205390 | . 3004 Vinyl Single | Value (Adjusted) | 2016 | 1 | 5.198931 | . 3005 Vinyl Single | Value (Adjusted) | 2017 | 1 | 6.339678 | . 3006 Vinyl Single | Value (Adjusted) | 2018 | 1 | 5.386197 | . 3007 Vinyl Single | Value (Adjusted) | 2019 | 1 | 6.795946 | . 3008 rows × 5 columns . Looking at the data, the column &quot;Value (Actual)&quot; has missing information for many of the data entries. Additionally, it seems some of the data in the &quot;Value (Actual)&quot; column is measuring sales based on units sold while other entries are measuring sales by revenue. . Cleaning the Data . First, I am replacing all NaN values with a zero. . new_df = df.fillna(0) new_df . Format Metric Year Number of Records Value (Actual) . 0 CD | Units | 1973 | 1 | 0.000000 | . 1 CD | Units | 1974 | 1 | 0.000000 | . 2 CD | Units | 1975 | 1 | 0.000000 | . 3 CD | Units | 1976 | 1 | 0.000000 | . 4 CD | Units | 1977 | 1 | 0.000000 | . ... ... | ... | ... | ... | ... | . 3003 Vinyl Single | Value (Adjusted) | 2015 | 1 | 6.205390 | . 3004 Vinyl Single | Value (Adjusted) | 2016 | 1 | 5.198931 | . 3005 Vinyl Single | Value (Adjusted) | 2017 | 1 | 6.339678 | . 3006 Vinyl Single | Value (Adjusted) | 2018 | 1 | 5.386197 | . 3007 Vinyl Single | Value (Adjusted) | 2019 | 1 | 6.795946 | . 3008 rows × 5 columns . In some of the earlier years, certain formats such as Ringtones hadn&#39;t been created yet. I don&#39;t want to include these sales formats in my dataset for the years when the value is 0.0, so I am creating a new dataframe with these values removed. . new_df_no_values_0 = new_df[new_df[&quot;Value (Actual)&quot;] != 0.0].reset_index(drop=True) new_df_no_values_0 . Format Metric Year Number of Records Value (Actual) . 0 CD | Units | 1983 | 1 | 0.800000 | . 1 CD | Units | 1984 | 1 | 5.800000 | . 2 CD | Units | 1985 | 1 | 22.600000 | . 3 CD | Units | 1986 | 1 | 53.000000 | . 4 CD | Units | 1987 | 1 | 102.100000 | . ... ... | ... | ... | ... | ... | . 1269 Vinyl Single | Value (Adjusted) | 2015 | 1 | 6.205390 | . 1270 Vinyl Single | Value (Adjusted) | 2016 | 1 | 5.198931 | . 1271 Vinyl Single | Value (Adjusted) | 2017 | 1 | 6.339678 | . 1272 Vinyl Single | Value (Adjusted) | 2018 | 1 | 5.386197 | . 1273 Vinyl Single | Value (Adjusted) | 2019 | 1 | 6.795946 | . 1274 rows × 5 columns . . There are only 1274 rows now (in comparison to 3008 rows before) since some of the rows were irrelevant. . Creating a dataframe that has the units sold data for each year and format: . units = new_df_no_values_0[new_df_no_values_0[&#39;Metric&#39;] == &#39;Units&#39;] units . Format Metric Year Number of Records Value (Actual) . 0 CD | Units | 1983 | 1 | 0.8 | . 1 CD | Units | 1984 | 1 | 5.8 | . 2 CD | Units | 1985 | 1 | 22.6 | . 3 CD | Units | 1986 | 1 | 53.0 | . 4 CD | Units | 1987 | 1 | 102.1 | . ... ... | ... | ... | ... | ... | . 397 Paid Subscriptions | Units | 2014 | 1 | 7.7 | . 398 Paid Subscriptions | Units | 2015 | 1 | 10.8 | . 399 Paid Subscriptions | Units | 2016 | 1 | 22.7 | . 400 Paid Subscriptions | Units | 2017 | 1 | 35.3 | . 401 Paid Subscriptions | Units | 2018 | 1 | 50.2 | . 402 rows × 5 columns . . len(list(set(units[&quot;Format&quot;]))) . 17 . The units sold data contains data on 17 different sales formats. . Creating a dataframe that has the present value of revenue sales data for each year and format: . adjusted = new_df_no_values_0[new_df_no_values_0[&#39;Metric&#39;] == &#39;Value (Adjusted)&#39;].reset_index(drop=True) adjusted . Format Metric Year Number of Records Value (Actual) . 0 8 - Track | Value (Adjusted) | 1973 | 1 | 2815.681824 | . 1 8 - Track | Value (Adjusted) | 1974 | 1 | 2848.008609 | . 2 8 - Track | Value (Adjusted) | 1975 | 1 | 2770.409498 | . 3 8 - Track | Value (Adjusted) | 1976 | 1 | 3047.215772 | . 4 8 - Track | Value (Adjusted) | 1977 | 1 | 3421.416287 | . ... ... | ... | ... | ... | ... | . 431 Vinyl Single | Value (Adjusted) | 2015 | 1 | 6.205390 | . 432 Vinyl Single | Value (Adjusted) | 2016 | 1 | 5.198931 | . 433 Vinyl Single | Value (Adjusted) | 2017 | 1 | 6.339678 | . 434 Vinyl Single | Value (Adjusted) | 2018 | 1 | 5.386197 | . 435 Vinyl Single | Value (Adjusted) | 2019 | 1 | 6.795946 | . 436 rows × 5 columns . . len(list(set(adjusted[&quot;Format&quot;]))) . 23 . The value (adjusted) data contains data for 23 different sales format. This dataset is missing units sold data for some of the more recent sales format types, such as On-Demand Streaming and Limited Tier Paid Subscriptions. As a result, I am going to use the value (adjusted) data for my analysis. . Exploratory Data Visualizations . Creating dataframes with the adjusted revenue sales data for each sales format: . format_types = list(set(adjusted[&quot;Format&quot;])) format_types # step 2: create an empty list to input new data_frames format_dfs = [] # step 3: create all the new data frames and add to list for i in np.arange(len(format_types)): first_format_type = format_types[i] format_df = adjusted[adjusted[&quot;Format&quot;] == first_format_type] format_dfs.append(format_df) . Creating dataframes containing graph titles for each sales format: . name_dfs = list(set(adjusted[&quot;Format&quot;])) name_dfs[0] = &#39;Download Music Video Sales&#39; name_dfs[1] = &#39;Download Album Sales&#39; name_dfs[2] = &#39;Other Ad-Supported Streaming Sales&#39; name_dfs[3] = &#39;Paid Subscription Sales&#39; name_dfs[4] = &#39;Synchronization Sales&#39; name_dfs[5] = &#39;Cassette Sales&#39; name_dfs[6] = &#39;On-Demand Streaming (Ad-Supported) Sales&#39; name_dfs[7] = &#39;Limited Tier Paid Subscription Sales&#39; name_dfs[8] = &#39;Ringtones &amp; Ringbacks Sales&#39; name_dfs[9] = &#39;8 - Track Sales&#39; name_dfs[10] = &#39;CD Sales&#39; name_dfs[11] = &#39;Vinyl Single Sales&#39; name_dfs[12] = &#39;CD Single Sales&#39; name_dfs[13] = &#39;Kiosk Sales&#39; name_dfs[14] = &#39;DVD Audio Sales&#39; name_dfs[15] = &#39;SACD Sales&#39; name_dfs[16] = &#39;Other Digital Sales&#39; name_dfs[17] = &#39;Other Tapes Sales&#39; name_dfs[18] = &#39;SoundExchange Distributions Sales&#39; name_dfs[19] = &#39;LP/EP Sales&#39; name_dfs[20] = &#39;Download Single Sales&#39; name_dfs[21] = &#39;Cassette Single Sales&#39; name_dfs[22] = &#39;Music Video (Physical) Sales&#39; . def widgetplot(x): p = format_dfs[x].plot(kind=&#39;bar&#39;, x=&#39;Year&#39;, y=&#39;Value (Actual)&#39;, figsize=(10,6)) p.set_title(name_dfs[x], fontsize=14) p.set_xlabel(&#39;Year&#39;, fontsize=13) p.set_ylabel(&#39;Revenue ($ in millions)&#39;, fontsize=13) p.legend([&#39;Revenue (in millions, adjusted to PV)&#39;]) plt.show() ipywidgets.interactive(widgetplot, x=(0,22)) . Starting with Download Music Video sales (x=0), Download Music Video sales began in 2005 and peaked in 2008/2009, before significantly declining. In 2019, Download Music Video sales were just under $2 million. . Download Album sales (x=1) began in 2004, peaked in 2013, and have been declining since. However, it still remains a popular format as sales in 2019 were over $394 million. . Other Ad-Supported Streaming sales (x=2) weren&#39;t introduced until 2016. Sales were highest in 2017 and have declined slightly since but still remain a popular format, accounting for over $251 million in sales in 2019. . Paid Subscription sales (x=3), which became available in 2005, have significantly increased in recent years. Paid Subscription sales were highest in 2019, making up over $5.9 billion in sales. . Synchronization sales (x=4) started in 2009 and have been relatively constant since with a slight increase in the last few years. In 2019, Synchronization sales were around $276 million. . Cassette sales (x=5) peaked in 1988 and have decreased significantly since. Data on Cassette sales is not reported after 2008, as cassettes lost popularity. . On-Demand Streaming (Ad-Supported) sales (x=6) began in 2011 and have been increasing every year since. In 2019, On-Demand Streaming sales exceeded $908 million. . Limited Tier Paid Subscription sales (x=7) began in 2016 and have also been increasing every year since. Limited Tier Paid Subscription sales were over $829 mil in 2019. . Ringtones and Ringbacks (x=8) were introduced in 2005. Sales peaked shortly after in 2007 and have decreased significantly since. In 2019, Ringtones and Ringbacks sales were around $21 million. . 8-Track sales (x=9) peaked in 1978 before decreasing. Data for 8-Tracks sales stopped after 1982, as this format lost popularity. . CD sales (x=10) began in 1983 and peaked in 1999/2000. CD sales have decreased significantly since yet remain a popular sales format, with over $614 million in sales in 2019. . Vinyl Single sales (x=11) peaked in 1979 and have decreased significantly since, but still remain a used sales format. Vinyl Single sales is one of the sales formats that has been around the longest in the industry. In 2019, sales of Vinyl Singles were around $6.8 million. . CD Single sales (x=12) data begins in 1988 and peaked in 1997. CD Single sales declined significantly after 1997. In 2018 and 2019, CD Single sales have been under $1 million. . Kiosk sales (x=13) began in 2005 and peaked in 2009/2010 before declining. There was a resurgence of Kiosk sales in 2013 followed by another decline. In 2019, Kiosk sales were around $1.5 million. . DVD Audio sales (x=14) started in 2001 and peaked in 2005. Sales dropped significantly between 2011-2013 and have increased slightly since. In 2019, DVD Audio sales totaled just over $1 million. . SACD sales (x=15) became available in 2003 and also peaked in 2003. Since 2003, SACD sales have dropped sharply, accounting for less than half a million in sales in 2019. . Other Digital sales (x=16) were introduced in 2016 and have been increasing slightly since. In 2019, sales were around $21.5 million. . Other Tapes sales (x=17) began in 1973 and only lasted until 1976. Other Tapes sales peaked in 1973. . SoundExchange Distributions sales (x=18) began in 2004 and have been increasing for the most part since. In 2019, SoundExchange Distributions sales were over $908 million. . LP/EP sales (x=19) peaked in 1978 before declining sharply. Around 2008 LP/EP sales began to slowly climb again, yet sales still remain much lower than seen in the 1970s. In 2019, LP/EP sales were over $497 million. . Download Single sales (x=20) were introduced in 2004 and peaked in 2012. Since 2012, Download Single sales have been declining but still remain a popular format, accounting for over $414 million in sales in 2019. . Cassette Single sales (x=21) began in 1987 and peaked in 1992. Data on Cassette Single sales ends in 2002, as sales sharply declined to below $1 million. . Music Video (Physical) sales (x=22) became available in 1989 and saw peak sales in 1998 and 2004. Sales have steadily declined since, with 2019 sales around $27 million. . By analyzing these bar charts, we can see which sales formats have seen increased sales in recent years and which ones have seen declining sales. Formats that have seen increased sales recently include Synchronization, Paid Subscriptions, On-Demand Streaming (Ad-Supported), Limited Tier Paid Subscriptions, Other Digital, SoundExchange Distributions, and LP/EP. . Formats that have seen a decline in sales recently include Download Music Video, Download Album, Other Ad-Supported Streaming, Ringtones and Ringbacks, CDs, Vinyl Singles, CD Singles, Kiosks, DVD Audios, SACDs, Download Single, and Music Video (Physical). . Next, I want to look at how the composition of music industry sales changed from 1973 to 2019. To do this, I am going to look at four different points in time, each 15 years apart. . Looking at the most popular sales formats in 1973: . df_1973 = adjusted[adjusted[&#39;Year&#39;] == 1973] . df_1973_index = df_1973.set_index(&quot;Format&quot;) df_1973_index . Metric Year Number of Records Value (Actual) . Format . 8 - Track Value (Adjusted) | 1973 | 1 | 2815.681824 | . Cassette Value (Adjusted) | 1973 | 1 | 437.611081 | . LP/EP Value (Adjusted) | 1973 | 1 | 7174.518514 | . Other Tapes Value (Adjusted) | 1973 | 1 | 89.825432 | . Vinyl Single Value (Adjusted) | 1973 | 1 | 1094.027703 | . . Looking at the most popular sales formats in 1988: . df_1988 = adjusted[adjusted[&#39;Year&#39;] == 1988] df_1988_index = df_1988.set_index(&quot;Format&quot;) df_1988_index . Metric Year Number of Records Value (Actual) . Format . CD Value (Adjusted) | 1988 | 1 | 4516.462927 | . CD Single Value (Adjusted) | 1988 | 1 | 21.178686 | . Cassette Value (Adjusted) | 1988 | 1 | 7315.507276 | . Cassette Single Value (Adjusted) | 1988 | 1 | 123.830483 | . LP/EP Value (Adjusted) | 1988 | 1 | 1150.132336 | . Vinyl Single Value (Adjusted) | 1988 | 1 | 389.860717 | . . Looking at the most popular sales formats in 2003: . df_2003 = adjusted[adjusted[&#39;Year&#39;] == 2003] df_2003_index = df_2003.set_index(&quot;Format&quot;) df_2003_index . Metric Year Number of Records Value (Actual) . Format . CD Value (Adjusted) | 2003 | 1 | 15607.443020 | . CD Single Value (Adjusted) | 2003 | 1 | 50.019848 | . Cassette Value (Adjusted) | 2003 | 1 | 150.198487 | . DVD Audio Value (Adjusted) | 2003 | 1 | 11.115522 | . LP/EP Value (Adjusted) | 2003 | 1 | 30.150853 | . Music Video (Physical) Value (Adjusted) | 2003 | 1 | 555.637143 | . SACD Value (Adjusted) | 2003 | 1 | 36.542278 | . Vinyl Single Value (Adjusted) | 2003 | 1 | 29.872965 | . . Looking at the most popular sales formats in 2018: . df_2018 = adjusted[adjusted[&#39;Year&#39;] == 2018] df_2018_index = df_2018.set_index(&quot;Format&quot;) df_2018_index . Metric Year Number of Records Value (Actual) . Format . CD Value (Adjusted) | 2018 | 1 | 711.041239 | . CD Single Value (Adjusted) | 2018 | 1 | 0.157981 | . DVD Audio Value (Adjusted) | 2018 | 1 | 3.377494 | . Download Album Value (Adjusted) | 2018 | 1 | 508.704388 | . Download Music Video Value (Adjusted) | 2018 | 1 | 2.261051 | . Download Single Value (Adjusted) | 2018 | 1 | 499.316974 | . Kiosk Value (Adjusted) | 2018 | 1 | 2.000652 | . LP/EP Value (Adjusted) | 2018 | 1 | 426.820187 | . Limited Tier Paid Subscription Value (Adjusted) | 2018 | 1 | 760.591366 | . Music Video (Physical) Value (Adjusted) | 2018 | 1 | 28.060664 | . On-Demand Streaming (Ad-Supported) Value (Adjusted) | 2018 | 1 | 773.294917 | . Other Ad-Supported Streaming Value (Adjusted) | 2018 | 1 | 255.967444 | . Other Digital Value (Adjusted) | 2018 | 1 | 20.199063 | . Paid Subscription Value (Adjusted) | 2018 | 1 | 4740.333581 | . Ringtones &amp; Ringbacks Value (Adjusted) | 2018 | 1 | 25.410090 | . SACD Value (Adjusted) | 2018 | 1 | 0.875277 | . SoundExchange Distributions Value (Adjusted) | 2018 | 1 | 970.064513 | . Synchronization Value (Adjusted) | 2018 | 1 | 290.686929 | . Vinyl Single Value (Adjusted) | 2018 | 1 | 5.386197 | . . Plotting the sales data from 1973, 1988, 2003, and 2018: . a = df_1973_index.plot(kind=&#39;pie&#39;, y=&#39;Value (Actual)&#39;,figsize=(17,8)) plt.legend(bbox_to_anchor=(1.0, 1.0)) a.set_title(&#39;Music Industry Sales in 1973&#39;, fontsize=14) b = df_1988_index.plot(kind=&#39;pie&#39;, y=&#39;Value (Actual)&#39;,figsize=(17,8)) plt.legend(bbox_to_anchor=(1.0, 1.0)) b.set_title(&#39;Music Industry Sales in 1988&#39;, fontsize=14) c = df_2003_index.plot(kind=&#39;pie&#39;, y=&#39;Value (Actual)&#39;,figsize=(17,8)) plt.legend(bbox_to_anchor=(1.0, 1.0)) c.set_title(&#39;Music Industry Sales in 2003&#39;, fontsize=14) d = df_2018_index.plot(kind=&#39;pie&#39;, y=&#39;Value (Actual)&#39;,figsize=(19,9)) plt.legend(bbox_to_anchor=(1.6, 1.0)) d.set_title(&#39;Music Industry Sales in 2018&#39;, fontsize=14) . Text(0.5, 1.0, &#39;Music Industry Sales in 2018&#39;) . Looking at the above pie charts provides insight into the most commonly used sales formats during these four points in time as well as how music industry sales have changed between 1973 and 2018. In 1973, the most common music sales format was an LP or EP album, accounting for almost 2/3rds of sales. Other popular sales formats in 1973 included 8-tracks, vinyl singles, cassettes, and other tapes. In 1988, the most common music sales format was cassettes, followed by CDs. Cassettes accounted for over half of music sales in 1988. Other common sales formats included LP/EP albums, vinyl singles, cassette singles, and CD singles. 15 years later in 2003, the most popular music sales format was by far the CD, making up over 80% of music sales. Other sales formats included physical music videos, cassettes, CD singles, LP/EP albums, super audio CDs, vinyl singles, and dvd audios. . Most recently, in 2018, the most common music sales format was a paid subscription, accounting for a little under half of music sales. Other popular music formats include soundexchange distributions, CDs, on-demand streaming (ad-supported), limited tier paid subscriptions, single downloads, album downloads, LP/EP albums, synchronization, and other ad-supported streaming. Less popular but still used sales formats in 2018 included CD singles, DVD audios, downloading music videos, kiosks, physical music videos, other digital, ringtones and ringbacks, and vinyl singles. . As shown by the charts above, the number of sales formats available to purchase music increased dramatically between 2003 and 2018. In those 15 years, sales of CDs and other physical formats dropped significantly while sales shifted more towards technology-based formats. . Correlation Analysis . To begin my analysis, I am going to look at the correlation between different sales formats throughout the 2000&#39;s. . Looking at the correlation between Paid Subscription sales and CD sales since 2005: . format_dfs[3] . Format Metric Year Number of Records Value (Actual) . 315 Paid Subscription | Value (Adjusted) | 2005 | 1 | 195.309905 | . 316 Paid Subscription | Value (Adjusted) | 2006 | 1 | 261.490444 | . 317 Paid Subscription | Value (Adjusted) | 2007 | 1 | 288.585326 | . 318 Paid Subscription | Value (Adjusted) | 2008 | 1 | 262.896754 | . 319 Paid Subscription | Value (Adjusted) | 2009 | 1 | 245.722059 | . 320 Paid Subscription | Value (Adjusted) | 2010 | 1 | 249.025694 | . 321 Paid Subscription | Value (Adjusted) | 2011 | 1 | 281.639932 | . 322 Paid Subscription | Value (Adjusted) | 2012 | 1 | 445.276306 | . 323 Paid Subscription | Value (Adjusted) | 2013 | 1 | 706.011657 | . 324 Paid Subscription | Value (Adjusted) | 2014 | 1 | 831.834028 | . 325 Paid Subscription | Value (Adjusted) | 2015 | 1 | 1247.676869 | . 326 Paid Subscription | Value (Adjusted) | 2016 | 1 | 2390.487545 | . 327 Paid Subscription | Value (Adjusted) | 2017 | 1 | 3651.028327 | . 328 Paid Subscription | Value (Adjusted) | 2018 | 1 | 4740.333581 | . 329 Paid Subscription | Value (Adjusted) | 2019 | 1 | 5934.397625 | . . cds_2005_on = format_dfs[10][format_dfs[10][&#39;Year&#39;]&gt;= 2005] . print(format_dfs[3][&#39;Value (Actual)&#39;].reset_index(drop=True).corr(cds_2005_on[&#39;Value (Actual)&#39;].reset_index(drop=True))) . -0.5719970540170898 . Since 2005, Paid Subscription sales and CD sales have been negatively correlated, with a correlation of -0.57 . ax = format_dfs[3].plot(kind=&#39;line&#39;, x=&#39;Year&#39;, y=&#39;Value (Actual)&#39;, figsize=(9,6)) cds_2005_on.plot(kind=&#39;line&#39;, x=&#39;Year&#39;, y=&#39;Value (Actual)&#39;, ax=ax) ax.set_title(&#39;Paid Subscription vs CD Sales&#39;) ax.legend([&#39;Paid Subscription Sales&#39;, &#39;CD Sales&#39;]) . &lt;matplotlib.legend.Legend at 0x7f402aceee20&gt; . Since Paid Subscriptions became available in 2005, Paid Subscription sales have been increasing, while CD sales have been decreasing. This makes sense as the two formats are negatively correlated. Prior to 2015, CD sales were higher than Paid Subscription sales. However, since 2015 it appears that Paid Subscription sales have surpassed CD sales. . Looking at the correlation between On-Demand Streaming sales and CD sales since 2011: . format_dfs[6] . Format Metric Year Number of Records Value (Actual) . 294 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2011 | 1 | 129.340695 | . 295 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2012 | 1 | 190.339616 | . 296 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2013 | 1 | 242.396098 | . 297 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2014 | 1 | 306.475448 | . 298 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2015 | 1 | 401.245264 | . 299 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2016 | 1 | 521.288175 | . 300 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2017 | 1 | 686.918081 | . 301 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2018 | 1 | 773.294917 | . 302 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2019 | 1 | 908.149331 | . . cds_2011_on = format_dfs[10][format_dfs[10][&#39;Year&#39;]&gt;= 2011] . print(cds_2011_on[&#39;Value (Actual)&#39;].reset_index(drop=True).corr(format_dfs[6][&#39;Value (Actual)&#39;].reset_index(drop=True))) . -0.9323705630229808 . Since 2011, On-Demand Streaming (Ad-Supported) sales and CD sales have been very negatively correlated, with a correlation of -0.93 . ax = format_dfs[6].plot(kind=&#39;line&#39;, x=&#39;Year&#39;, y=&#39;Value (Actual)&#39;, figsize=(9,6)) cds_2011_on.plot(kind=&#39;line&#39;, x=&#39;Year&#39;, y=&#39;Value (Actual)&#39;, ax=ax) ax.set_title(&#39;On-Demand Streaming vs CD Sales&#39;) ax.legend([&#39;On-Demand Streaming Sales&#39;, &#39;CD Sales&#39;]) . &lt;matplotlib.legend.Legend at 0x7f40210e80d0&gt; . Since On-Demand Streaming arose in 2011, On-Demand Streaming sales have been increasing, while CD sales have been decreasing. This is consistent with the results of the correlation analysis. Prior to 2018, CD sales were higher than On-Demand Streaming sales. However, since roughly 2018, On-Demand Streaming sales have surpassed CD sales. . Looking at the correlation between Paid Subscription sales and Cassette sales between 2005 and 2008: . ps_before_2008 = format_dfs[3][format_dfs[3][&#39;Year&#39;]&lt;=2008] . cassette_2005_on = format_dfs[5][format_dfs[5][&#39;Year&#39;]&gt;=2005] . print(ps_before_2008[&#39;Value (Actual)&#39;].reset_index(drop=True).corr(cassette_2005_on[&#39;Value (Actual)&#39;].reset_index(drop=True))) . -0.9141174644189466 . Between 2005 and 2008, Paid Subscription sales and Cassette sales were very negatively correlated, with a correlation of -0.91 . ax = ps_before_2008.plot(kind=&#39;line&#39;, x=&#39;Year&#39;, y=&#39;Value (Actual)&#39;, figsize=(9,6)) cassette_2005_on.plot(kind=&#39;line&#39;, x=&#39;Year&#39;, y=&#39;Value (Actual)&#39;, ax=ax) ax.set_title(&#39;Paid Subscription vs Cassette Sales&#39;) ax.legend([&#39;Paid Subscription Sales&#39;, &#39;Cassette Sales&#39;]) . &lt;matplotlib.legend.Legend at 0x7f402103cfa0&gt; . Between 2005 and 2008 (when Paid Subscription and Cassette sales overlapped as sales formats) Paid Subscription sales were significantly higher than Cassette sales. Additionally, Paid Subscription sales increased between 2005 and 2008 while Cassette sales decreased. . Looking at correlation between Paid Subscription Sales and On-Demand Streaming sales after 2011: . format_dfs[6] . Format Metric Year Number of Records Value (Actual) . 294 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2011 | 1 | 129.340695 | . 295 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2012 | 1 | 190.339616 | . 296 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2013 | 1 | 242.396098 | . 297 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2014 | 1 | 306.475448 | . 298 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2015 | 1 | 401.245264 | . 299 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2016 | 1 | 521.288175 | . 300 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2017 | 1 | 686.918081 | . 301 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2018 | 1 | 773.294917 | . 302 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2019 | 1 | 908.149331 | . . ps_2011_on = format_dfs[3][format_dfs[3][&#39;Year&#39;]&gt;=2011] . print(ps_2011_on[&#39;Value (Actual)&#39;].reset_index(drop=True).corr(format_dfs[6][&#39;Value (Actual)&#39;].reset_index(drop=True))) . 0.9851826999334489 . Since 2011, Paid Subscription sales and On-Demand Streaming sales have been very highly correlated, with a correlation of 0.98 . ax = ps_2011_on.plot(kind=&#39;line&#39;, x=&#39;Year&#39;, y=&#39;Value (Actual)&#39;, figsize=(9,6)) format_dfs[6].plot(kind=&#39;line&#39;, x=&#39;Year&#39;, y=&#39;Value (Actual)&#39;, ax=ax) ax.set_title(&#39;Paid Subscription vs On-Demand Streaming Sales&#39;) ax.legend([&#39;Paid Subscription Sales&#39;, &#39;On-Demand Streaming Sales&#39;]) . &lt;matplotlib.legend.Legend at 0x7f4020fd9700&gt; . Since 2011, both Paid Subscription sales as well as On-Demand Streaming sales have increased, which makes sense since they are highly correlated. However, Paid Subscription sales increased at a higher rate than On-Demand Streaming sales. . Looking at the correlation between On-Demand Streaming (Ad-Supported) sales and Other Ad-Supported Streaming sales after 2016: . format_dfs[2] . Format Metric Year Number of Records Value (Actual) . 303 Other Ad-Supported Streaming | Value (Adjusted) | 2016 | 1 | 86.559597 | . 304 Other Ad-Supported Streaming | Value (Adjusted) | 2017 | 1 | 273.040319 | . 305 Other Ad-Supported Streaming | Value (Adjusted) | 2018 | 1 | 255.967444 | . 306 Other Ad-Supported Streaming | Value (Adjusted) | 2019 | 1 | 251.064710 | . . ods_2016_on = format_dfs[6][format_dfs[6][&#39;Year&#39;]&gt;=2016] . print(ods_2016_on[&#39;Value (Actual)&#39;].reset_index(drop=True).corr(format_dfs[2][&#39;Value (Actual)&#39;].reset_index(drop=True))) . 0.767500469481728 . Since 2016, when Other Ad-Supported Streaming became an option, Other Ad-Supported Streaming sales and On-Demand Streaming (Ad-Supported) have been highly correlated, with a correlation of 0.77 . ax = ods_2016_on.plot(kind=&#39;line&#39;, x=&#39;Year&#39;, y=&#39;Value (Actual)&#39;, figsize=(9,6)) format_dfs[2].plot(kind=&#39;line&#39;, x=&#39;Year&#39;, y=&#39;Value (Actual)&#39;, ax=ax) ax.set_title(&#39;On-Demand Streaming vs Other Ad-Supported Streaming Sales&#39;) ax.legend([&#39;On-Demand Streaming Sales&#39;, &#39;Other Ad-Supported Streaming Sales&#39;]) . &lt;matplotlib.legend.Legend at 0x7f402acdbca0&gt; . Since 2016, both On-Demand Streaming (Ad-Supported) sales and Other Ad-Supported Streaming sales have increased, which is consistent with the correlation results. Despite both sales formats increasing, On-Demand Streaming (Ad-Supported) sales were higher than Other Ad-Supported Streaming sales between 2016 and 2019. . Looking at the correlation between On-Demand Streaming (Ad-Supported) Sales and Download Album sales since 2011: . format_dfs[6] . Format Metric Year Number of Records Value (Actual) . 294 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2011 | 1 | 129.340695 | . 295 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2012 | 1 | 190.339616 | . 296 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2013 | 1 | 242.396098 | . 297 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2014 | 1 | 306.475448 | . 298 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2015 | 1 | 401.245264 | . 299 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2016 | 1 | 521.288175 | . 300 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2017 | 1 | 686.918081 | . 301 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2018 | 1 | 773.294917 | . 302 On-Demand Streaming (Ad-Supported) | Value (Adjusted) | 2019 | 1 | 908.149331 | . . download_album_2011_on = format_dfs[1][format_dfs[1][&#39;Year&#39;]&gt;=2011] . print(download_album_2011_on[&#39;Value (Actual)&#39;].reset_index(drop=True).corr(format_dfs[6][&#39;Value (Actual)&#39;].reset_index(drop=True))) . -0.9715897248193843 . Since 2011, Download Album sales and On-Demand Streaming (Ad-Supported) sales have been very negatively correlated, with a correlation of -0.97 . ax = download_album_2011_on.plot(kind=&#39;line&#39;, x=&#39;Year&#39;, y=&#39;Value (Actual)&#39;, figsize=(9,6)) format_dfs[6].plot(kind=&#39;line&#39;, x=&#39;Year&#39;, y=&#39;Value (Actual)&#39;, ax=ax) ax.set_title(&#39;Download Album vs On-Demand Streaming Sales&#39;) ax.legend([&#39;Download Album Sales&#39;, &#39;On-Demand Streaming Sales&#39;]) . &lt;matplotlib.legend.Legend at 0x7f4020ecfee0&gt; . Since 2011, On-Demand Streaming sales have been increasing, while Download Album sales have been decreasing. This makes sense since the two formats are negatively correlated. Prior to 2017, Download Album sales were higher than On-Demand Streaming sales. However, after 2017 On-Demand Streaming sales surpassed Download Album sales. . Looking at the correlation between CD Single sales and Download Single sales after 2004: . cd_single_2004_on = format_dfs[12][format_dfs[12][&#39;Year&#39;]&gt;=2004] . print(cd_single_2004_on[&#39;Value (Actual)&#39;].reset_index(drop=True).corr(format_dfs[20][&#39;Value (Actual)&#39;].reset_index(drop=True))) . -0.4073087892744402 . Since 2004, CD Single sales and Download Single sales have been negatively correlated, with a correlation of -0.4 . ax = format_dfs[20].plot(kind=&#39;line&#39;, x=&#39;Year&#39;, y=&#39;Value (Actual)&#39;, figsize=(9,6)) cd_single_2004_on.plot(kind=&#39;line&#39;, x=&#39;Year&#39;, y=&#39;Value (Actual)&#39;, ax=ax) ax.set_title(&#39;Download Single vs CD Single Sales&#39;) ax.legend([&#39;Download Single Sales&#39;, &#39;CD Single Sales&#39;]) . &lt;matplotlib.legend.Legend at 0x7f4020d599a0&gt; . Since 2004, Download Single sales have been higher than CD Single sales. Between 2004 and now, CD Single Sales slightly decreased, while Download Single sales increased until roughly 2012, and have been decreasing ever since. . Looking at the correlation between Other Ad-Supported Streaming sales and Limited Tier Paid Subscription sales: . format_dfs[2] . Format Metric Year Number of Records Value (Actual) . 303 Other Ad-Supported Streaming | Value (Adjusted) | 2016 | 1 | 86.559597 | . 304 Other Ad-Supported Streaming | Value (Adjusted) | 2017 | 1 | 273.040319 | . 305 Other Ad-Supported Streaming | Value (Adjusted) | 2018 | 1 | 255.967444 | . 306 Other Ad-Supported Streaming | Value (Adjusted) | 2019 | 1 | 251.064710 | . . print(format_dfs[2][&#39;Value (Actual)&#39;].reset_index(drop=True).corr(format_dfs[7][&#39;Value (Actual)&#39;].reset_index(drop=True))) . 0.8876592647894722 . Since 2016, Other Ad-Supported Streaming sales and Limited Tier Paid Subscription sales have been highly correlated, with a correlation of 0.89 . ax = format_dfs[2].plot(kind=&#39;line&#39;, x=&#39;Year&#39;, y=&#39;Value (Actual)&#39;, figsize=(9,6)) format_dfs[7].plot(kind=&#39;line&#39;, x=&#39;Year&#39;, y=&#39;Value (Actual)&#39;, ax=ax) ax.set_title(&#39;Other Ad-Supported Streaming vs Limited Tier Paid Subscription Sales&#39;) ax.legend([&#39;Other Ad-Supported Streaming Sales&#39;, &#39;Limited Tier Paid Subscription Sales&#39;]) . &lt;matplotlib.legend.Legend at 0x7f402ace5250&gt; . Since both Other Ad-Supported Streaming and Limited Tier Paid Subscriptions became available in 2016, both of these sale formats have increased. However, Limited Tier Paid Subscriptions sales have been higher than Other Ad-Supported Streaming sales and also seem to be increasing at a higher rate. . Looking at the correlation between Paid Subscription sales and SoundExchange Distributions sales: . print(format_dfs[3][&#39;Value (Actual)&#39;].reset_index(drop=True).corr(format_dfs[18][&#39;Value (Actual)&#39;].reset_index(drop=True))) . 0.7744466362621104 . Since 2005, Paid Subscription sales and SoundExchange Distrubtions sales have been highly correlated, with a correlation of 0.77 . ax = format_dfs[3].plot(kind=&#39;line&#39;, x=&#39;Year&#39;, y=&#39;Value (Actual)&#39;, figsize=(9,6)) format_dfs[18].plot(kind=&#39;line&#39;, x=&#39;Year&#39;, y=&#39;Value (Actual)&#39;, ax=ax) ax.set_title(&#39;Paid Subscription vs SoundExchange Distributions Sales&#39;) ax.legend([&#39;Paid Subscription Sales&#39;, &#39;SoundExchange Distributions Sales&#39;]) . &lt;matplotlib.legend.Legend at 0x7f402ace5eb0&gt; . Since 2005, both Paid Subscription sales and SoundExchange Distribution sales have increased. However, Paid Subscription sales have increased at a higher rate. . Looking at the correlation between Download Album sales and Download Single sales: . print(format_dfs[1][&#39;Value (Actual)&#39;].reset_index(drop=True).corr(format_dfs[20][&#39;Value (Actual)&#39;].reset_index(drop=True))) . 0.934879112862656 . Since 2004, Download Album sales and Download Single sales have been highly correlated, with a correlation of 0.93 . ax = format_dfs[1].plot(kind=&#39;line&#39;, x=&#39;Year&#39;, y=&#39;Value (Actual)&#39;, figsize=(9,6)) format_dfs[20].plot(kind=&#39;line&#39;, x=&#39;Year&#39;, y=&#39;Value (Actual)&#39;, ax=ax) ax.set_title(&#39;Download Album vs Download Single Sales&#39;) ax.legend([&#39;Download Album Sales&#39;, &#39;Download Single Sales&#39;]) . &lt;matplotlib.legend.Legend at 0x7f4020c150d0&gt; . Since 2004, Download Album sales and Download Single sales have been very similar. Both sales formats increased until roughly 2012, when they both reached their peak sales and began decreasing. Prior to roughly 2016, Download Single sales were higher than Download Album sales, but since 2016 they have been almost the same. . Based on the above correlation analysis, sales formats that have been highly correlated in the 2000&#39;s include: . (1) Other Ad-Supported Streaming and Limited Tier Paid Subscription sales (r = 0.89) . (2) Paid Subscription and On-Demand Streaming (Ad-Supported) sales (r = 0.98) . (3) On-Demand Streaming (Ad-Supported) and Other Ad-Supported Streaming sales (r = 0.77) . (4) Paid Subscription and SoundExchange Distributions sales (r = 0.77) . (5) Download Album and Download Single sales (r = 0.93) . Since these formats have been highly correlated throughout the 2000&#39;s, when one of the sales formats has increased, so has the other correlated format. Similarly, if one of the sales formats decreased, the correlated sales format also decreased. . Sales formats that have been negatively correlated in the 2000&#39;s include: . (1) Paid Subscription and CD sales (r = -0.57) . (2) On-Demand Streaming (Ad-Supported) and CD sales (r = -0.93) . (3) Paid Subscription and Cassette sales (r = -0.91) . (4) On-Demand Streaming (Ad-Supported) and Download Album sales (r = -0.97) . (5) CD Single and Download Single sales (r = -0.4) . Since these formats have been negatively correlated or anti-correlated throughout the 2000&#39;s, when one of the sales formats increases, the other sales format decreases. For example, while Paid Subscription sales increased in the 2000&#39;s, CD sales decreased in the 2000&#39;s. Based on the above correlations, it appears that the newer streaming formats are negatively correlated with some of the older sales formats. As these streaming options increase in sales, their counterparts see decreased sales. . Linear Regression Analysis . To see how well sales of one format can predict sales of another, correlated format, I am plotting the linear regression of highly correlated sales formats. . Since Other Ad-Supported Streaming and Limited Tier Paid Subscription sales are highly correlated (r=0.89), we might be able to use linear regression to predict Limited Tier Paid Subscription sales from Other Ad-Supported Streaming sales. . X = adjusted[adjusted[&quot;Format&quot;] == &#39;Other Ad-Supported Streaming&#39;][[&#39;Value (Actual)&#39;]] Y = adjusted[adjusted[&quot;Format&quot;] == &#39;Limited Tier Paid Subscription&#39;][[&#39;Value (Actual)&#39;]] print (X) print (Y) . Value (Actual) 303 86.559597 304 273.040319 305 255.967444 306 251.064710 Value (Actual) 259 280.536691 260 617.032318 261 760.591366 262 829.498740 . . reg = LinearRegression().fit(X, Y) . reg.coef_ . array([[2.48454051]]) . reg.intercept_ . array([83.61915699]) . ytrain = reg.intercept_ + reg.coef_ * X . figure(figsize=(9, 5)) plt.plot(X,Y,&#39;ro&#39;,X,ytrain,&#39;b-&#39;) plt.title(&quot;Other Ad-Supported Streaming vs Limited Tier Paid Subscription&quot;) plt.xlabel(&quot;Other Ad-Supported Streaming Sales&quot;) plt.ylabel(&quot;Limited Tier Paid Subscription Sales&quot;) . Text(0, 0.5, &#39;Limited Tier Paid Subscription Sales&#39;) . To test how well the model fits the data, I am calculating the mean squared error and R-squared value. . mean_squared_error(Y, ytrain) . 9483.641410110005 . r2_score(Y, ytrain) . 0.787938970366586 . Based on the R-squared value of 0.79, the model fits the data decently well. As a result, it seems Other Ad-Supported Streaming sales can be used to predict Limited Tier Paid Subscription sales. However, since data is only available for 2016-2019 for these sales formats, there might not be enough data to make this assumption . Since Paid Subscription and On-Demand Streaming (Ad-Supported) sales have been highly correlated (r=0.985) since 2011, we may be able to use linear regression to predict On-Demand Streaming sales using Paid Subscription sales. . adjusted_2011_on = adjusted[adjusted[&#39;Year&#39;]&gt;=2011] . PS = adjusted_2011_on[adjusted_2011_on[&quot;Format&quot;] == &#39;Paid Subscription&#39;][[&#39;Value (Actual)&#39;]] OD = adjusted_2011_on[adjusted_2011_on[&quot;Format&quot;] == &#39;On-Demand Streaming (Ad-Supported)&#39;][[&#39;Value (Actual)&#39;]] print (PS) print (OD) . Value (Actual) 321 281.639932 322 445.276306 323 706.011657 324 831.834028 325 1247.676869 326 2390.487545 327 3651.028327 328 4740.333581 329 5934.397625 Value (Actual) 294 129.340695 295 190.339616 296 242.396098 297 306.475448 298 401.245264 299 521.288175 300 686.918081 301 773.294917 302 908.149331 . . reg = LinearRegression().fit(PS, OD) . reg.coef_ . array([[0.13146726]]) . reg.intercept_ . array([166.67085972]) . ytrain = reg.intercept_ + reg.coef_ * PS . figure(figsize=(9, 5)) plt.plot(PS, OD,&#39;ro&#39;,PS,ytrain,&#39;b-&#39;) plt.title(&quot;Paid Subscription vs On-Demand Streaming&quot;) plt.xlabel(&quot;Paid Subscription Sales&quot;) plt.ylabel(&quot;On-Demand Streaming (Ad-Supported) Sales&quot;) . Text(0, 0.5, &#39;On-Demand Streaming (Ad-Supported) Sales&#39;) . mean_squared_error(OD, ytrain) . 1995.723477381923 . r2_score(OD, ytrain) . 0.9705849522481601 . The high R-squared value of 0.97 indicates that the regression line is a good fit for the data. As a result, Paid Subscription sales can be used to predict On-Demand Streaming sales. . On-Demand Streaming (Ad-Supported) and Other-Ad Supported Streaming sales also have a high correlation (r=0.77). Thus, we might be able to predict Other Ad-Supported Streaming sales using On-Demand Streaming sales by finding the linear regression. . adjusted_2016_on = adjusted[adjusted[&#39;Year&#39;]&gt;=2016] . DS = adjusted_2016_on[adjusted_2016_on[&quot;Format&quot;] == &#39;On-Demand Streaming (Ad-Supported)&#39;][[&#39;Value (Actual)&#39;]] AS = adjusted_2016_on[adjusted_2016_on[&quot;Format&quot;] == &#39;Other Ad-Supported Streaming&#39;][[&#39;Value (Actual)&#39;]] print (DS) print (AS) . Value (Actual) 299 521.288175 300 686.918081 301 773.294917 302 908.149331 Value (Actual) 303 86.559597 304 273.040319 305 255.967444 306 251.064710 . . reg = LinearRegression().fit(DS, AS) . reg.coef_ . array([[0.4131505]]) . reg.intercept_ . array([-81.80711775]) . ytrain = reg.intercept_ + reg.coef_ * DS . figure(figsize=(9, 5)) plt.plot(DS, AS,&#39;ro&#39;,DS,ytrain,&#39;b-&#39;) plt.title(&quot;On-Demand Streaming vs Other Ad-Supported Streaming&quot;) plt.xlabel(&quot;On-Demand Streaming (Ad-Supported) Sales&quot;) plt.ylabel(&quot;Other Ad-Supported Streaming Sales&quot;) . Text(0, 0.5, &#39;Other Ad-Supported Streaming Sales&#39;) . mean_squared_error(AS, ytrain) . 2345.82868062942 . r2_score(AS, ytrain) . 0.5890569706546729 . The R-squared value of 0.59 indicates that the regression line is not a good fit for the data. As a result, we cannot use On-Demand Streaming sales to predict Other Ad-Supported Streaming sales. . Paid Subscription and SoundExchange Distributions sales have a strong correlation (r=0.77). By finding the linear regression, we can can predict future SoundExchange Distributions sales using Paid Subscription sales. . adjusted_2005_on = adjusted[adjusted[&#39;Year&#39;]&gt;=2005] . PS2 = adjusted_2005_on[adjusted_2005_on[&quot;Format&quot;] == &#39;Paid Subscription&#39;][[&#39;Value (Actual)&#39;]] SD = adjusted_2005_on[adjusted_2005_on[&quot;Format&quot;] == &#39;SoundExchange Distributions&#39;][[&#39;Value (Actual)&#39;]] print (PS2) print (SD) . Value (Actual) 315 195.309905 316 261.490444 317 288.585326 318 262.896754 319 245.722059 320 249.025694 321 281.639932 322 445.276306 323 706.011657 324 831.834028 325 1247.676869 326 2390.487545 327 3651.028327 328 4740.333581 329 5934.397625 Value (Actual) 363 26.704571 364 41.594988 365 44.644397 366 118.742888 367 185.304463 368 292.171389 369 331.875949 370 514.445212 371 647.930274 372 835.213587 373 865.719793 374 941.535965 375 680.027595 376 970.064513 377 908.200000 . . reg = LinearRegression().fit(PS2, SD) . reg.coef_ . array([[0.13828152]]) . reg.intercept_ . array([293.27206305]) . ytrain = reg.intercept_ + reg.coef_ * PS2 . figure(figsize=(9, 5)) plt.plot(PS2, SD,&#39;ro&#39;,PS2,ytrain,&#39;b-&#39;) plt.title(&quot;Paid Subscription vs SoundExchange Distributions&quot;) plt.xlabel(&quot;Paid Subscription Sales&quot;) plt.ylabel(&quot;SoundExchange Distributions Sales&quot;) . Text(0, 0.5, &#39;SoundExchange Distributions Sales&#39;) . mean_squared_error(SD, ytrain) . 60636.34678105076 . r2_score(SD, ytrain) . 0.5056529285525253 . As with the previous regression, the regression line does not fit the data, as indicated by the R-squared value of 0.5. Consequently, Paid Subscription sales cannot be used to predict SoundExchange Distribution sales. . The last formats I found to be highly correlated are Download Album and Download Single sales (r=0.93). We can predict future Download Album sales using Download Single sales by finding the linear regression. . adjusted_2004_on = adjusted[adjusted[&#39;Year&#39;]&gt;=2004] . DS = adjusted_2004_on[adjusted_2004_on[&quot;Format&quot;] == &#39;Download Single&#39;][[&#39;Value (Actual)&#39;]] DA = adjusted_2004_on[adjusted_2004_on[&quot;Format&quot;] == &#39;Download Album&#39;][[&#39;Value (Actual)&#39;]] print (DS) print (DA) . Value (Actual) 181 186.769010 182 475.577000 183 736.282015 184 1000.182475 185 1225.664089 186 1396.635564 187 1566.845282 188 1730.301179 189 1831.258646 190 1726.739156 191 1463.655387 192 1278.449595 193 958.879103 194 707.692711 195 499.316974 196 414.804251 Value (Actual) 150 61.579637 151 177.637762 152 349.879793 153 613.428807 154 754.373567 155 886.958917 156 1022.834349 157 1217.030020 158 1341.590983 159 1352.202953 160 1207.247578 161 1148.145081 162 925.232201 163 697.237618 164 508.704388 165 394.533006 . . reg = LinearRegression().fit(DS, DA) . reg.coef_ . array([[0.73282105]]) . reg.intercept_ . array([3.42431643]) . ytrain = reg.intercept_ + reg.coef_ * DS . figure(figsize=(9, 5)) plt.plot(DS, DA,&#39;ro&#39;,DS,ytrain,&#39;b-&#39;) plt.title(&quot;Download Single vs Download Album&quot;) plt.xlabel(&quot;Download Single&quot;) plt.ylabel(&quot;Download Album&quot;) . Text(0, 0.5, &#39;Download Album&#39;) . mean_squared_error(DA, ytrain) . 20182.09275609223 . r2_score(DA, ytrain) . 0.8739989556668669 . An R-squared of 0.87 indicates that the regression line sufficiently fits the data. Resultantly, Download Single sales can be used to predict Download Album sales. . Next, I am going to perform linear regression on the sales formats that are negatively correlated in order to see which sales formats can be used to accurately predict other sales formats. . Since Paid Subscription sales and CD sales are negatively correlated, (r=-0.57), we might be able to predict CD sales based on Paid Subscription sales using linear regression. . PS2 = adjusted_2005_on[adjusted_2005_on[&quot;Format&quot;] == &#39;Paid Subscription&#39;][[&#39;Value (Actual)&#39;]] CD = adjusted_2005_on[adjusted_2005_on[&quot;Format&quot;] == &#39;CD&#39;][[&#39;Value (Actual)&#39;]] print (PS2) print (CD) . Value (Actual) 315 195.309905 316 261.490444 317 288.585326 318 262.896754 319 245.722059 320 249.025694 321 281.639932 322 445.276306 323 706.011657 324 831.834028 325 1247.676869 326 2390.487545 327 3651.028327 328 4740.333581 329 5934.397625 Value (Actual) 32 13771.442760 33 11885.767850 34 9190.702658 35 6496.779627 36 5146.578220 37 3973.859173 38 3524.136143 39 2767.776149 40 2349.534897 41 1918.215115 42 1558.633452 43 1204.497778 44 1102.774352 45 711.041239 46 614.509780 . . reg = LinearRegression().fit(PS2, CD) . reg.coef_ . array([[-1.27787903]]) . reg.intercept_ . array([6265.78356157]) . ytrain = reg.intercept_ + reg.coef_ * PS2 . figure(figsize=(9, 5)) plt.plot(PS2,CD,&#39;ro&#39;,PS2,ytrain,&#39;b-&#39;) plt.title(&quot;Paid Subscription vs CD&quot;) plt.xlabel(&quot;Paid Subscription Sales&quot;) plt.ylabel(&quot;CD Sales&quot;) . Text(0, 0.5, &#39;CD Sales&#39;) . mean_squared_error(CD, ytrain) . 10892202.708141036 . r2_score(CD, ytrain) . 0.32718062980422935 . Based on the extremely high mean squared error and low R-squared value, this regression line does not fit the data well. As a result, CD sales cannot be predicted based on Paid Subscription sales, as the correlation isn&#39;t high enough. . Since On-Demand Streaming (Ad-Supported) sales and CD sales are negatively correlated, (r=-0.93), we might be able to predict CD sales based on On-Demand Streaming sales using linear regression. . OD = adjusted_2011_on[adjusted_2011_on[&quot;Format&quot;] == &#39;On-Demand Streaming (Ad-Supported)&#39;][[&#39;Value (Actual)&#39;]] CD2 = adjusted_2011_on[adjusted_2011_on[&quot;Format&quot;] == &#39;CD&#39;][[&#39;Value (Actual)&#39;]] print (OD) print (CD2) . Value (Actual) 294 129.340695 295 190.339616 296 242.396098 297 306.475448 298 401.245264 299 521.288175 300 686.918081 301 773.294917 302 908.149331 Value (Actual) 38 3524.136143 39 2767.776149 40 2349.534897 41 1918.215115 42 1558.633452 43 1204.497778 44 1102.774352 45 711.041239 46 614.509780 . . reg = LinearRegression().fit(OD, CD2) . reg.coef_ . array([[-3.30941107]]) . reg.intercept_ . array([3279.60454803]) . ytrain = reg.intercept_ + reg.coef_ * OD . figure(figsize=(9, 5)) plt.plot(OD,CD2,&#39;ro&#39;,OD,ytrain,&#39;b-&#39;) plt.title(&quot;On-Demand Streaming vs CD&quot;) plt.xlabel(&quot;On-Demand Streaming (Ad-Supported) Sales&quot;) plt.ylabel(&quot;CD Sales&quot;) . Text(0, 0.5, &#39;CD Sales&#39;) . mean_squared_error(CD2, ytrain) . 111707.23908765972 . r2_score(CD2, ytrain) . 0.8693148667917903 . While the mean squared error value is quite high, the R-squared of 0.87 implies that the regression line sufficiently fits the data. Therefore, we can use On-Demand Streaming Sales to predict CD Sales using this regression line. . On-Demand Streaming (Ad-Supported) sales and Download Album sales are very negatively correlated, (r=-0.97). As a result, we might be able to use linear regression to predict On-Demand Streaming sales using Download Album sales. . DA2 = adjusted_2011_on[adjusted_2011_on[&quot;Format&quot;] == &#39;Download Album&#39;][[&#39;Value (Actual)&#39;]] OD = adjusted_2011_on[adjusted_2011_on[&quot;Format&quot;] == &#39;On-Demand Streaming (Ad-Supported)&#39;][[&#39;Value (Actual)&#39;]] print (DA2) print (OD) . Value (Actual) 157 1217.030020 158 1341.590983 159 1352.202953 160 1207.247578 161 1148.145081 162 925.232201 163 697.237618 164 508.704388 165 394.533006 Value (Actual) 294 129.340695 295 190.339616 296 242.396098 297 306.475448 298 401.245264 299 521.288175 300 686.918081 301 773.294917 302 908.149331 . . reg = LinearRegression().fit(DA2, OD) . reg.coef_ . array([[-0.73982141]]) . reg.intercept_ . array([1184.87789656]) . ytrain = reg.intercept_ + reg.coef_ * DA2 . figure(figsize=(9, 5)) plt.plot(DA2,OD,&#39;ro&#39;,DA2,ytrain,&#39;b-&#39;) plt.title(&quot;Download Album vs On-Demand Streaming&quot;) plt.xlabel(&quot;Download Album Sales&quot;) plt.ylabel(&quot;On-Demand Streaming (Ad-Supported) Sales&quot;) . Text(0, 0.5, &#39;On-Demand Streaming (Ad-Supported) Sales&#39;) . mean_squared_error(OD, ytrain) . 3800.3429942908488 . r2_score(OD, ytrain) . 0.9439865933746077 . The high R-squared value of 0.94 demonstrates that the regression line fits the data very well. As a result, we should be able to predict On-Demand Streaming sales by looking at Download Album sales. . Lastly, CD Single sales and Download Single sales are also negatively correlated (r=-0.4). This correlation is on the lower end, but I am still going to perform linear regression to see if we can predict Download Single sales based on CD Single sales. . CDS = adjusted_2004_on[adjusted_2004_on[&quot;Format&quot;] == &#39;CD Single&#39;][[&#39;Value (Actual)&#39;]] DS = adjusted_2004_on[adjusted_2004_on[&quot;Format&quot;] == &#39;Download Single&#39;][[&#39;Value (Actual)&#39;]] print (CDS) print (DS) . Value (Actual) 63 20.300979 64 14.268619 65 9.764677 66 15.045902 67 4.156001 68 3.694173 69 3.400068 70 3.977965 71 3.591198 72 2.684057 73 3.905024 74 1.291079 75 0.280361 76 1.542259 77 0.157981 78 0.181679 Value (Actual) 181 186.769010 182 475.577000 183 736.282015 184 1000.182475 185 1225.664089 186 1396.635564 187 1566.845282 188 1730.301179 189 1831.258646 190 1726.739156 191 1463.655387 192 1278.449595 193 958.879103 194 707.692711 195 499.316974 196 414.804251 . . reg = LinearRegression().fit(CDS, DS) . reg.coef_ . array([[-35.51411031]]) . reg.intercept_ . array([1270.80558653]) . ytrain = reg.intercept_ + reg.coef_ * CDS . figure(figsize=(9, 5)) plt.plot(CDS,DS,&#39;ro&#39;,CDS,ytrain,&#39;b-&#39;) plt.title(&quot;CD Single vs Download Single&quot;) plt.xlabel(&quot;CD Single Sales&quot;) plt.ylabel(&quot;Download Single Sales&quot;) . Text(0, 0.5, &#39;Download Single Sales&#39;) . mean_squared_error(DS, ytrain) . 217432.7641589061 . r2_score(DS, ytrain) . 0.16590044982021035 . As I predicted, the correlation between CD Single sales and Download Single sales isn&#39;t strong enough to create an accurate regression line. As indicated by the high mean squared error and low R-squared value, Download Single sales cannot be predicted based on CD Single sales. . In summary, the linear regression analysis revealed that a few of the sales formats have a strong enough correlation that sales of one can predict sales of the other. The results revealed that: Limited Tier Paid Subscription sales can be predicted based on Other Ad-Supported Streaming sales, On-Demand Streaming sales can be predicted based on Paid Subscription sales, and Download Album sales can be predicted by looking at Download Single sales. As a result, we can expect that if one of the sales formats sees an increase in sales and popularity, the correlated sales format will also see an increase in sales and popularity. Similarly, if one sales format sees a decrease in sales, then the correlated sales format will most likely also see a decrease in sales. . For the negatively correlated formats, the linear regression analysis revealed that: CD sales can be predicted using On-Demand Streaming sales, and On-Demand Streaming sales can be predicted by looking at Download Album sales. More specifically, a decrease in CD sales can be predicted by an increase in On-Demand Streaming sales and an increase in On-Demand Streaming sales can be predicted by a decrease in Download Album sales. . Growth Rate Analysis . As a last step in my analysis, I am going to look at the growth rates of popular sales formats in 2019. This information will help to predict which formats might have high growth in the near future. . Popular sales formats in recent years include: Other Ad-Supported Streaming, Paid Subscription, Synchronization, On-Demand Streaming (Ad-Supported), Limited Tier Paid Subscription, Other Digital Sales, SoundExchange Distributions, CDs, LP/EP, Download Single, and Download Album. . Other Ad-Supported Streaming: . format_dfs[2][&#39;Value (Actual)&#39;].pct_change(periods=1) . 303 NaN 304 2.154362 305 -0.062529 306 -0.019154 Name: Value (Actual), dtype: float64 . . In 2019, Other Ad-Supported Streaming sales decreased by 1.9%. . Paid Subscription: . format_dfs[3][&#39;Value (Actual)&#39;].pct_change(periods=1) . 315 NaN 316 0.338849 317 0.103617 318 -0.089016 319 -0.065329 320 0.013445 321 0.130967 322 0.581013 323 0.585559 324 0.178216 325 0.499911 326 0.915951 327 0.527315 328 0.298356 329 0.251895 Name: Value (Actual), dtype: float64 . . In 2019, Paid Subscription sales increased by 25%. . Synchronization: . format_dfs[4][&#39;Value (Actual)&#39;].pct_change(periods=1) . 378 NaN 379 -0.077263 380 0.009471 381 -0.049703 382 -0.019185 383 -0.015788 384 0.068425 385 0.045471 386 0.057748 387 0.200872 388 -0.049622 Name: Value (Actual), dtype: float64 . . In 2019, Synchronization sales decreased by 4.96%. . On-Demand Streaming (Ad-Supported): . format_dfs[6][&#39;Value (Actual)&#39;].pct_change(periods=1) . 294 NaN 295 0.471614 296 0.273493 297 0.264358 298 0.309225 299 0.299176 300 0.317732 301 0.125745 302 0.174389 Name: Value (Actual), dtype: float64 . . In 2019, On-Demand Streaming (Ad-Supported) sales increased by 17.4%. . Limited Tier Paid Subscription: . format_dfs[7][&#39;Value (Actual)&#39;].pct_change(periods=1) . 259 NaN 260 1.199471 261 0.232661 262 0.090597 Name: Value (Actual), dtype: float64 . . In 2019, Limited Tier Paid Subscription sales increased by 9.1%. . Other Digital: . format_dfs[16][&#39;Value (Actual)&#39;].pct_change(periods=1) . 307 NaN 308 -0.035514 309 0.146960 310 0.065256 Name: Value (Actual), dtype: float64 . . In 2019, Other Digital sales increased by 6.5%. . SoundExchange Distributions: . format_dfs[18][&#39;Value (Actual)&#39;].pct_change(periods=1) . 362 NaN 363 1.859636 364 0.557598 365 0.073312 366 1.659749 367 0.560552 368 0.576710 369 0.135895 370 0.550113 371 0.259474 372 0.289049 373 0.036525 374 0.087576 375 -0.277747 376 0.426508 377 -0.063774 Name: Value (Actual), dtype: float64 . . In 2019, SoundExchange Distributions sales decreased by 6.4%. . CDs: . format_dfs[10][&#39;Value (Actual)&#39;].pct_change(periods=1) . 10 NaN 11 4.757258 12 2.640914 13 1.344358 14 0.653034 15 0.259331 16 0.181276 17 0.265472 18 0.205973 19 0.192070 20 0.186922 21 0.267496 22 0.077319 23 0.029045 24 -0.024359 25 0.133716 26 0.098402 27 -0.002461 28 -0.050117 29 -0.081550 30 -0.088134 31 -0.007417 32 -0.111043 33 -0.136926 34 -0.226747 35 -0.293114 36 -0.207826 37 -0.227864 38 -0.113170 39 -0.214623 40 -0.151111 41 -0.183577 42 -0.187456 43 -0.227209 44 -0.084453 45 -0.355225 46 -0.135761 Name: Value (Actual), dtype: float64 . . In 2019, CD sales decreased by 13.6%. . LP/EP: . format_dfs[19][&#39;Value (Actual)&#39;].pct_change(periods=1) . 212 NaN 213 -0.019884 214 0.003532 215 0.058853 216 0.239372 217 0.047243 218 -0.253090 219 -0.057681 220 -0.035123 221 -0.225612 222 -0.149950 223 -0.120958 224 -0.201661 225 -0.246340 226 -0.221593 227 -0.355622 228 -0.605086 229 -0.627482 230 -0.673841 231 -0.554235 232 -0.237637 233 0.637321 234 0.371251 235 0.424086 236 -0.115405 237 0.005361 238 -0.084916 239 -0.157258 240 -0.038199 241 -0.263470 242 0.034950 243 -0.133670 244 -0.288359 245 0.071083 246 0.418493 247 1.383948 248 0.129238 249 0.370930 250 0.301985 251 0.318797 252 0.292265 253 0.138633 254 0.365548 255 0.052862 256 0.070270 257 0.053325 258 0.165805 Name: Value (Actual), dtype: float64 . . In 2019, LP/EP sales increased by 16.6%. . Download Single: . format_dfs[20][&#39;Value (Actual)&#39;].pct_change(periods=1) . 181 NaN 182 1.546338 183 0.548187 184 0.358423 185 0.225440 186 0.139493 187 0.121871 188 0.104322 189 0.058347 190 -0.057075 191 -0.152359 192 -0.126536 193 -0.249967 194 -0.261958 195 -0.294444 196 -0.169257 Name: Value (Actual), dtype: float64 . . In 2019, Download Single sales decreased by 16.9%. . Download Album: . format_dfs[1][&#39;Value (Actual)&#39;].pct_change(periods=1) . 150 NaN 151 1.884683 152 0.969625 153 0.753256 154 0.229765 155 0.175756 156 0.153192 157 0.189860 158 0.102348 159 0.007910 160 -0.107199 161 -0.048956 162 -0.194150 163 -0.246419 164 -0.270400 165 -0.224436 Name: Value (Actual), dtype: float64 . . In 2019, Download Album sales decreased by 22.4%. . By looking at the sales growth rates for each sales format in 2019, we are able to see which formats have increasing sales and which have decreasing sales. If we assume these trends will continue into the near future, we can predict which sales formats will be most popular going forward as well as which formats are being used less. . Sales formats that saw positive growth in 2019 include Paid Subscription sales, On-Demand Streaming (Ad-Supported) sales, LP/EP sales, Limited Tier Paid Subscription sales, and Other Digital sales. As a result, I expect that these sales formats will continue to increase in the near future and they will eventually make up the majority of all music industry sales. Paid Subscription services not only had the highest sales of all the formats in 2018, but also saw the largest increase in sales in 2019, increasing 25%. Looking at the sales formats that are increasing in popularity, we can see that streaming services, both paid and free, are taking over the music industry as the most popular way to consume music. In addition to streaming services, it seems that LP albums and EP albums are also making a comeback in terms of popularity. . Sales formats that saw negative growth in 2019 include Download Album sales, Download Single sales, CD sales, SoundExchange Distributions sales, Synchronization sales, and Other Ad-Supported Streaming sales. It is reasonable to assume that the majority of these formats are decreasing in popularity and thus sales in these formats will continue to decrease into the future. Download Album, Download Single, and CD sales saw the largest decrease by far, demonstrating that consumers are steering away from downloading music or buying &quot;hard copies&quot;. Instead, consumers are getting their music from streaming services like Spotify, Apple Music, and Pandora or opting to buy LP/EP albums instead. . Discussion . Through my analysis, I revealed how music industry sales have changed since 1973 and especially throughout the 2000&#39;s. Music industry sales have been greatly affected by technology, as consumers now have access to a plethora of music formats that didn&#39;t even exist 15 years ago. My analysis revealed which music sale formats have been strongly correlated in the 2000s and which formats have been strongly anti-correlated. Since correlation doesn&#39;t imply causation, I cannot say that certain formats led to the demise of other formats. But, it is interesting to see how the rise of new formats is correlated to the decline of more traditional music formats. In my correlation analysis, I found that streaming formats were highly correlated with other streaming formats, meaning that sales of both increased similarly during the 2000s. More specifically, I found: . (1) Other Ad-Supported Streaming and Limited Tier Paid Subscription sales to be highly correlated, . (2) Paid Subscription and On-Demand Streaming (Ad-Supported) sales to be highly correlated, . (3) On-Demand Streaming (Ad-Supported) and Other Ad-Supported Streaming sales to be highly correlated, . (4) Paid Subscription and SoundExchange Distributions sales to be highly correlated, and . (5) Download Album and Download Single sales to be highly correlated. . In contrast, I found that streaming formats were very anti-correlated with older sales formats. While these streaming formats saw increased sales throughout the 2000&#39;s, the older sales formats had large decreases in sales. To be specific, I found: . (1) Paid Subscription and CD sales to be moderately anti-correlated, . (2) On-Demand Streaming (Ad-Supported) and CD sales to be very anti-correlated, . (3) Paid Subscription and Cassette sales to be very anti-correlated, . (4) On-Demand Streaming (Ad-Supported) and Download Album sales to be very anti-correlated, and . (5) CD Single and Download Single sales to be moderately anti-correlated. . My analysis also reveals where music industry sales may be focused in the future. Plotting the different sales formats revealed that a number of them have been steadily increasing in recent years. The formats that have seen increasing sales over the past few years are . (1) Synchronizations, . (2) Paid Subscriptions, . (3) On-Demand Streaming (Ad-Supported), . (4) Limited Tier Paid Subscriptions, . (5) Other Digital, . (6) SoundExchange Distributions, and . (7) LP/EP. . Formats that have seen decreasing sales over the past few years include: . (1) Download Music Video, . (2) Download Album, . (3) Other Ad-Supported Streaming, . (4) Ringtones and Ringbacks, . (5) CDs, . (6) Vinyl Singles, . (7) CD Singles, . (8) Kiosks, . (9) DVD Audios, . (10) SACDs, . (11) Download Single, and . (12) Music Video (Physical). . It is clear that sales are shifting away from traditional sales formats like owning an album to technology-based formats like streaming an album. Additionally, it appears that consumers like the flexibility streaming platforms provide to jump from one artist to another, without having to commit to a whole album. As a result, I would advise artists and managers to shift away from these formats. Instead of focusing on promoting an album in order to increase album sales, artists should focus their strategy and marketing efforts on streaming platforms. By putting their music on platforms like Spotify and Apple Music, artists will not only expose their music to a wider audience but also put themselves in a better place to make sales. . My analysis also demonstrated how quickly popularity of music sales formats shifts. These new sales formats that are seeing high growth now will probably continue to grow into the near future, but as even newer formats are made available, they too will begin to see decreased sales. Therefore, it is imperative that people in the music industry monitor new technologies and changes in the landscapes so they can stay on top of new trends. My correlation and linear regression analysis revealed which formats&#39;s sales are closely correlated. In the future, if we begin to see a decrease in a particular sales format, we should be cautious of a decrease in the correlated sales format as well. In conclusion, my analysis provided insight into the past and future of music industry sales. This analysis is of interest to me as I feel I now have a much stronger understanding of the music industry sales landscape and where the industry is heading in the future. With this knowledge, artists, managers, and others working in the industry can hopefully better focus their marketing and predict potential sales avenues. .",
            "url": "https://karinnm.github.io/Final_FastPage/fastpages/jupyter/2022/03/13/Final_Notebook.html",
            "relUrl": "/fastpages/jupyter/2022/03/13/Final_Notebook.html",
            "date": " • Mar 13, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://karinnm.github.io/Final_FastPage/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://karinnm.github.io/Final_FastPage/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://karinnm.github.io/Final_FastPage/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://karinnm.github.io/Final_FastPage/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}